#!/usr/bin/env ruby
#
require 'bundler/setup'
require 'aws-sdk-guardduty'
require 'optparse'
require 'shellwords'

def die(*mesg, exitstatus: 1)
  $stderr.puts *mesg
  exit exitstatus
end

config = {
  domainmap: nil,
  postmap: 'postmap',
}

o = OptionParser.new
o.on('-d PATH', '--domain-map', String, 'Path to domain map file') { |v| config[:domainmap] = v }
o.on('-m PATH', '--postmap', String, 'Path to postmap program (default: search in $PATH)') { config[:postmap] = v }
o.on('-a', '--archive', 'Archive finding automatically') { config[:archive] = true }
o.on('-h', 'Show this help') { puts o; exit }
begin
  o.parse!(ARGV)
rescue => e
  die e.message
end

unless config[:domainmap]
  die "Specify --domain-map"
end

dmapf = open(config[:domainmap], File::RDWR | File::CREAT)
dmap = []
while line = dmapf.gets
  dmap << line.chomp.split(/\t+/) unless /^\s*#/ =~ line
end

gd = Aws::GuardDuty::Client.new
detector_id = gd.list_detectors.detector_ids.first
token = ''
archives = []
begin
  finding_ids = gd.list_findings(
    detector_id: detector_id,
    finding_criteria: {
      criterion: {
        'service.archived': {eq: ['false']},
        'service.action.actionType': {eq: ['DNS_REQUEST']},
      }
    },
    max_results: 50,
    next_token: token
  )
  token = finding_ids.next_token

  findings = gd.get_findings(
    detector_id: detector_id,
    finding_ids: finding_ids.finding_ids,
  )
  findings.findings.each do |finding|
    domain = finding.service.action.dns_request_action.domain
    if dmap.assoc(domain)
      archives << finding.id
    else
      dmap << [domain, "REJECT", "# #{finding.type} @ #{finding.service.event_first_seen}"]
    end
  end
end while token != ''

if config[:archive] && !archives.empty?
  archives.each_slice(50) do |finding_ids|
    gd.archive_findings(
      detectod_id: detector_id,
      finding_ids: finding_ids
    )
  end
end

dmapf.rewind
dmapf.puts "# auto-generated by #{File.basename($0)} @ #{Time.now}"
dmap.each do |line|
  dmapf.puts line.join("\t")
end
dmapf.truncate(dmapf.pos)
dmapf.fdatasync
dmapf.close
system "#{Shellwords.escape(config[:postmap])} #{Shellwords.escape(config[:domainmap])}"
